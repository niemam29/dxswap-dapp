import { MenuBar } from '../../../../pages/MenuBar'
import { TokenMenu } from '../../../../pages/TokenMenu'
import { BridgePage } from '../../../../pages/BridgePage'
import { NetworkSwitcher } from '../../../../pages/NetworkSwitcher'
import { AddressesEnum } from '../../../../utils/enums/AddressesEnum'
import { ArbiscanFacade } from '../../../../utils/facades/ArbiscanFacade'

describe('Bridge tests', () => {
  let balanceBefore: number
  const TRANSACTION_VALUE = 1

  before(() => {
    ArbiscanFacade.erc20TokenBalance(AddressesEnum.USDC_TOKEN_ARINKEBY).then((res: { body: { result: number } }) => {
      balanceBefore = res.body.result
      console.log('ERC20 BALANCE BEFORE: ', balanceBefore)
    })
    BridgePage.visitBridgePage()
    MenuBar.connectWallet()
  })
  after(() => {
    cy.disconnectMetamaskWalletFromAllDapps()
    cy.resetMetamaskAccount()
    cy.wait(500)
  })
  it('Should initiate a bridging ', () => {
    BridgePage.getNetworkFromSelector().click()
    NetworkSwitcher.rinkeby().click()
    BridgePage.getNetworkToSelector().click()
    NetworkSwitcher.arinkeby().click()
    BridgePage.getBridgeButton().should('contain.text', 'Enter amount')
    BridgePage.getTransactionValueInput().type(String(TRANSACTION_VALUE))
    BridgePage.getSelectTokenButton().click()
    TokenMenu.chooseToken('usdc')
    BridgePage.getBridgeButton().should('contain.text', 'Select bridge below')
    BridgePage.getBridgeSelector('arbitrum').should('be.visible')
    BridgePage.getBridgedAmount().should('contain.text', String(TRANSACTION_VALUE))
    BridgePage.getBridgeSelector('arbitrum').click()
    BridgePage.getBridgeButton()
      .should('contain.text', 'Bridge to')
      .click()
    BridgePage.confirmBridging()
    cy.wait(5000)
    cy.confirmMetamaskTransaction({})
    BridgePage.getBridgingInitiatedModal().should('contain.text', 'Bridging Initiated')
    BridgePage.closeBridgeInitiatedModal()
    BridgePage.getStatusTag(600000).should('contain.text', 'Pending')
    BridgePage.getBridgedFromChain().should('contain.text', 'Rinkeby')
    BridgePage.getBridgedToChain().should('contain.text', 'A. Rinkeby')
    BridgePage.getBridgedAssetName().should('contain.text', '1 USDC')
  })
  it('Should select ethereum and select others networks as to', () => {
    BridgePage.getNetworkFromSelector().click()
    NetworkSwitcher.ethereum().click()
    BridgePage.getBridgeButton()
      .should('contain.text', 'Connect to Ethereum')
      .click()
    cy.allowMetamaskToSwitchNetwork()
    NetworkSwitcher.getNetworkSwitcher().should('contain.text', 'Ethereum')
    BridgePage.getNetworkToSelector().click()
    NetworkSwitcher.arbitrum().click()
    BridgePage.getNetworkToSelector().should('contain.text', 'Arbitrum one')

    BridgePage.getSelectTokenButton().click()
    TokenMenu.chooseToken('eth')
    BridgePage.getTokenSymbol().should('contain.text', 'ETH')

    BridgePage.getNetworkToSelector().click()
    NetworkSwitcher.gnosis().click()
    BridgePage.getNetworkToSelector().should('contain.text', 'Gnosis Chain')
    BridgePage.getNetworkToSelector().click()
    NetworkSwitcher.rinkeby().click()
    BridgePage.getNetworkToSelector().should('contain.text', 'Rinkeby')
    BridgePage.getNetworkToSelector().click()
    NetworkSwitcher.arinkeby().click()
    BridgePage.getNetworkToSelector().should('contain.text', 'A. Rinkeby')
  })
  it('Should select Arbitrum and select others networks as to', () => {
    BridgePage.getNetworkFromSelector().click()
    NetworkSwitcher.arbitrum().click()
    BridgePage.getBridgeButton()
      .should('contain.text', 'Connect to Arbitrum')
      .click()
    cy.allowMetamaskToAddAndSwitchNetwork()
    NetworkSwitcher.getNetworkSwitcher().should('contain.text', 'Arbitrum One')
    BridgePage.getNetworkToSelector().click()
    NetworkSwitcher.ethereum().click()
    BridgePage.getNetworkToSelector().should('contain.text', 'Ethereum')
    BridgePage.getNetworkToSelector().click()
    NetworkSwitcher.gnosis().click()
    BridgePage.getNetworkToSelector().should('contain.text', 'Gnosis Chain')
    BridgePage.getNetworkToSelector().click()
    NetworkSwitcher.rinkeby().click()
    BridgePage.getNetworkToSelector().should('contain.text', 'Rinkeby')
    BridgePage.getNetworkToSelector().click()
    NetworkSwitcher.arinkeby().click()
    BridgePage.getNetworkToSelector().should('contain.text', 'A. Rinkeby')
  })
  it('Should select Gnosis Chain and select others networks as to', () => {
    BridgePage.getNetworkFromSelector().click()
    NetworkSwitcher.gnosis().click()
    BridgePage.getBridgeButton()
      .should('contain.text', 'Connect to Gnosis Chain')
      .click()
    cy.allowMetamaskToAddAndSwitchNetwork()
    NetworkSwitcher.getNetworkSwitcher().should('contain.text', 'Gnosis Chain')
    BridgePage.getNetworkToSelector().click()
    NetworkSwitcher.ethereum().click()
    BridgePage.getNetworkToSelector().should('contain.text', 'Ethereum')
    BridgePage.getNetworkToSelector().click()
    NetworkSwitcher.arbitrum().click()
    BridgePage.getNetworkToSelector().should('contain.text', 'Arbitrum one')
    BridgePage.getNetworkToSelector().click()
    NetworkSwitcher.rinkeby().click()
    BridgePage.getNetworkToSelector().should('contain.text', 'Rinkeby')
    BridgePage.getNetworkToSelector().click()
    NetworkSwitcher.arinkeby().click()
    BridgePage.getNetworkToSelector().should('contain.text', 'A. Rinkeby')
  })
  it('Should select Gnosis Chain and select others networks as to', () => {
    BridgePage.getNetworkFromSelector().click()
    NetworkSwitcher.rinkeby().click()
    BridgePage.getBridgeButton()
      .should('contain.text', 'Connect to Rinkeby')
      .click()
    cy.allowMetamaskToSwitchNetwork()
    NetworkSwitcher.getNetworkSwitcher().should('contain.text', 'Rinkeby')
    BridgePage.getNetworkToSelector().click()
    NetworkSwitcher.ethereum().click()
    BridgePage.getNetworkToSelector().should('contain.text', 'Ethereum')
    BridgePage.getNetworkToSelector().click()
    NetworkSwitcher.arbitrum().click()
    BridgePage.getNetworkToSelector().should('contain.text', 'Arbitrum one')
    BridgePage.getNetworkToSelector().click()
    NetworkSwitcher.gnosis().click()
    BridgePage.getNetworkToSelector().should('contain.text', 'Gnosis Chain')
    BridgePage.getNetworkToSelector().click()
    NetworkSwitcher.arinkeby().click()
    BridgePage.getNetworkToSelector().should('contain.text', 'A. Rinkeby')
  })
  it('Should select Gnosis Chain and select others networks as to', () => {
    BridgePage.getNetworkFromSelector().click()
    NetworkSwitcher.arinkeby().click()
    BridgePage.getBridgeButton()
      .should('contain.text', 'Connect to A. Rinkeby')
      .click()
    cy.allowMetamaskToAddAndSwitchNetwork()
    NetworkSwitcher.getNetworkSwitcher().should('contain.text', 'Arbitrum Rinkeby')
    BridgePage.getNetworkToSelector().click()
    NetworkSwitcher.ethereum().click()
    BridgePage.getNetworkToSelector().should('contain.text', 'Ethereum')
    BridgePage.getNetworkToSelector().click()
    NetworkSwitcher.arbitrum().click()
    BridgePage.getNetworkToSelector().should('contain.text', 'Arbitrum one')
    BridgePage.getNetworkToSelector().click()
    NetworkSwitcher.gnosis().click()
    BridgePage.getNetworkToSelector().should('contain.text', 'Gnosis Chain')
    BridgePage.getNetworkToSelector().click()
    NetworkSwitcher.rinkeby().click()
    BridgePage.getNetworkToSelector().should('contain.text', 'Rinkeby')
  })
  it('Should switch from network based on wallet network', () => {
    cy.changeMetamaskNetwork('ethereum')
    BridgePage.getNetworkFromSelector().should('contain.text', 'Ethereum')
    cy.changeMetamaskNetwork('arbitrum one')
    BridgePage.getNetworkFromSelector().should('contain.text', 'Arbitrum one')
    cy.changeMetamaskNetwork('gnosis chain')
    BridgePage.getNetworkFromSelector().should('contain.text', 'Gnosis Chain')
    cy.changeMetamaskNetwork('rinkeby')
    BridgePage.getNetworkFromSelector().should('contain.text', 'Rinkeby')
    cy.changeMetamaskNetwork('arbitrum rinkeby')
    BridgePage.getNetworkFromSelector().should('contain.text', 'A. Rinkeby')
  })
  it('Should display no tokens', () => {
    cy.changeMetamaskNetwork('ethereum')
    BridgePage.getNetworkFromSelector().should('contain.text', 'Ethereum')
    cy.changeMetamaskNetwork('arbitrum one')
    BridgePage.getNetworkFromSelector().should('contain.text', 'Arbitrum one')
    cy.changeMetamaskNetwork('gnosis chain')
    BridgePage.getNetworkFromSelector().should('contain.text', 'Gnosis Chain')
    cy.changeMetamaskNetwork('rinkeby')
    BridgePage.getNetworkFromSelector().should('contain.text', 'Rinkeby')
    cy.changeMetamaskNetwork('arbitrum rinkeby')
    BridgePage.getNetworkFromSelector().should('contain.text', 'A. Rinkeby')
  })
  it('Should display history of bridge', () => {
    cy.changeMetamaskNetwork('rinkeby')
    BridgePage.getStatusTag(600000).should('contain.text', 'Confirmed')
    BridgePage.getBridgedFromChain().should('contain.text', 'Rinkeby')
    BridgePage.getBridgedToChain().should('contain.text', 'A. Rinkeby')
    BridgePage.getBridgedAssetName().should('contain.text', '1 USDC')
    ArbiscanFacade.erc20TokenBalance(AddressesEnum.USDC_TOKEN_ARINKEBY).then(res => {
      console.log(res)
    })
    cy.wait(10000)
    ArbiscanFacade.erc20TokenBalance(AddressesEnum.USDC_TOKEN_ARINKEBY).should(res => {
      expect(res.body.result).to.be.eq(balanceBefore + 10000000)
    })
    cy.wait(10000)
    ArbiscanFacade.erc20TokenBalance(AddressesEnum.USDC_TOKEN_ARINKEBY).then(res => {
      console.log(res)
    })
    cy.wait(10000)
    ArbiscanFacade.erc20TokenBalance(AddressesEnum.USDC_TOKEN_ARINKEBY).then(res => {
      console.log(res)
    })
    cy.wait(10000)
    ArbiscanFacade.erc20TokenBalance(AddressesEnum.USDC_TOKEN_ARINKEBY).then(res => {
      console.log(res)
    })
    cy.wait(10000)
    ArbiscanFacade.erc20TokenBalance(AddressesEnum.USDC_TOKEN_ARINKEBY).then(res => {
      console.log(res)
    })
    cy.wait(10000)
    ArbiscanFacade.erc20TokenBalance(AddressesEnum.USDC_TOKEN_ARINKEBY).then(res => {
      console.log(res)
    })
    cy.wait(10000)
    ArbiscanFacade.erc20TokenBalance(AddressesEnum.USDC_TOKEN_ARINKEBY).then(res => {
      console.log(res)
    })
    cy.wait(10000)
    ArbiscanFacade.erc20TokenBalance(AddressesEnum.USDC_TOKEN_ARINKEBY).then(res => {
      console.log(res)
    })
    cy.wait(10000)
    ArbiscanFacade.erc20TokenBalance(AddressesEnum.USDC_TOKEN_ARINKEBY).then(res => {
      console.log(res)
    })
    cy.wait(10000)
    ArbiscanFacade.erc20TokenBalance(AddressesEnum.USDC_TOKEN_ARINKEBY).then(res => {
      console.log(res)
    })
    cy.wait(1000000000)
  })
})
